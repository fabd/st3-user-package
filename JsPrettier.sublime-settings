{
  /////////////////////////////////////////////////////////////////////////
  // 
  //   Pour installer prettier (local):
  //   
  //   $ npm install --save-dev prettier
  //   
  //   
  //   Sublime > Preferences > Key Bindings:
  //   
  //   { "keys": ["ctrl+shift+f"], "command": "js_prettier" },
  // 
  /////////////////////////////////////////////////////////////////////////

  // ----------------------------------------------------------------------
  // Allow Inline Formatting
  // ----------------------------------------------------------------------
  //
  // @param {bool} "allow_inline_formatting"
  // @default false
  //
  // Provides the ability to format selections of in-lined code, outside of
  // the normally supported syntaxes and file types. For example, to format a
  // selection of JavaScript code within a PHP or HTML file. When `true`, the
  // JsPrettier command is available for use across all Sublime Text syntaxes.
  // ----------------------------------------------------------------------

  "allow_inline_formatting": true,


  // ----------------------------------------------------------------------
  // Prettier Options
  // ----------------------------------------------------------------------
  //
  // Native Prettier options are defined here.
  //
  // For a complete list of supported options and acceptable values,
  // visit https://github.com/jlongster/prettier.
  // ----------------------------------------------------------------------

  "prettier_options": {

    "printWidth": 80,

    // --------------------------------------------------------------------
    // singleQuote
    // --------------------------------------------------------------------
    //
    // @param {bool} "prettier_options.singleQuote"
    // @default false
    //
    // If true, will use single instead of double quotes.
    // --------------------------------------------------------------------
    "singleQuote": false,
    
    // --------------------------------------------------------------------
    // trailingComma
    // --------------------------------------------------------------------
    //
    // @param {string} "prettier_options.trailingComma"
    // @default "none"
    //
    // Controls the printing of trailing commas wherever possible.
    //
    // Valid options:
    //
    // "none" - No trailing commas
    // "es5"  - Trailing commas where valid in ES5 (objects, arrays, etc)
    // "all"  - Trailing commas wherever possible (function arguments)
    // --------------------------------------------------------------------
    "trailingComma": "es5",

    // --------------------------------------------------------------------
    // semi
    // --------------------------------------------------------------------
    //
    // @param {bool} "prettier_options.semi"
    // @default true
    //
    // Whether to add a semicolon at the end of every line (semi: true), or
    // only at the beginning of lines that may introduce ASI failures (semi: false)
    // --------------------------------------------------------------------
    "semi": true,
  },

}